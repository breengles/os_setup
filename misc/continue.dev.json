{
  "models": [
    {
      "title": "GPT-4o",
      "model": "gpt-4o",
      "provider": "openai",
      "systemMessage": "You are an expert software developer. You give helpful and concise responses.",
      "apiKey": "..."
    },
    {
      "title": "Gemini 1.5 Pro",
      "model": "gemini-1.5-pro-latest",
      "provider": "gemini",
      "systemMessage": "You are an expert software developer. You give helpful and concise responses.",
      "apiKey": "..."
    },
    {
      "title": "Gemini 1.5 Flash 8B",
      "model": "gemini-1.5-flash-8b",
      "provider": "gemini",
      "systemMessage": "You are an expert software developer. You give helpful and concise responses.",
      "apiKey": "..."
    },
    {
      "title": "llama3.1:8b",
      "model": "llama3.1:8b",
      "contextLength": 16384,
      "provider": "ollama"
    },
    {
      "title": "yi-coder:9b",
      "model": "yi-coder:9b",
      "contextLength": 16384,
      "provider": "ollama"
    },
    {
      "title": "codeqwen:7b-chat",
      "model": "codeqwen:7b-chat",
      "contextLength": 16384,
      "provider": "ollama"
    },
    {
      "title": "deepseek-coder-v2:16b",
      "model": "deepseek-coder-v2:16b",
      "contextLength": 16384,
      "provider": "ollama"
    }
  ],
  "tabAutocompleteModel": {
    "title": "StarCoder2-3b",
    "model": "starcoder2:3b",
    "provider": "ollama"
  },
  "tabAutocompleteOptions": {
    "debounceDelay": 500,
    "multilineCompletions": "always"
  },
  "customCommands": [
    {
      "name": "test",
      "prompt": "{{{ input }}}\n\nWrite a comprehensive set of unit tests for the selected code. It should setup, run tests that check for correctness including important edge cases, and teardown. Ensure that the tests are complete and sophisticated. Give the tests just as chat output, don't edit any file.",
      "description": "Write unit tests for highlighted code"
    },
    {
      "name": "docstrings",
      "prompt": "You will be acting as a senior software engineer helping a colleague document their code. You will follow the guidelines for writing great code comments:\nRule 1: Comments should not duplicate the code.\nRule 2: Good comments do not excuse unclear code.\nRule 3: If you can't write a clear comment, there may be a problem with the code.\nRule 4: Comments should dispel confusion, not cause it.\nRule 5: Explain unidiomatic code in comments.\nRule 6: Provide links to the original source of copied code.\nRule 7: Add comments when fixing bugs.\nRule 8: Use comments to mark incomplete implementations.\nRule 9: DO NOT LEAVE ANY COMMENT FOR IMPORTS.\nUsing this information, add docstrings, and simple comments if needed, the following code:\n\n{{{ input }}}",
      "description": "Add docstrings"
    }
  ],
  "contextProviders": [
    {
      "name": "code",
      "params": {}
    },
    {
      "name": "docs",
      "params": {}
    },
    {
      "name": "diff",
      "params": {}
    },
    {
      "name": "terminal",
      "params": {}
    },
    {
      "name": "problems",
      "params": {}
    },
    {
      "name": "folder",
      "params": {}
    },
    {
      "name": "codebase",
      "params": {}
    }
  ],
  "slashCommands": [
    {
      "name": "edit",
      "description": "Edit selected code"
    },
    {
      "name": "comment",
      "description": "Write comments for the selected code"
    },
    {
      "name": "share",
      "description": "Export the current chat session to markdown"
    },
    {
      "name": "cmd",
      "description": "Generate a shell command"
    },
    {
      "name": "commit",
      "description": "Generate a git commit message"
    }
  ]
}