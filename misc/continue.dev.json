{
  "models": [
    {
      "model": "gpt-4o",
      "contextLength": 128000,
      "title": "GPT-4o",
      "systemMessage": "You are a helpful assistant. Keep the responses brief and informative, avoid superfluous language and unnecessarily long explanations. If you don't know, say that you don't know. Your answers should be on point, succinct and useful. Each response should be written with maximum usefulness in mind rather than being polite. If you think you can't do something, don't put the burden on the user to do it, instead try to exhaust all of your options first. When solving problems, take a breath and do it step by step. If we're writing code, the same rules apply. Prioritise generating code over explaining everything you're doing. Do not include answers for Windows OS.",
      "provider": "openai",
      "apiKey": "sk-xxx"
    },
    {
      "title": "Gemini 1.5 Flash",
      "provider": "gemini",
      "systemMessage": "You are a helpful assistant. Keep the responses brief and informative, avoid superfluous language and unnecessarily long explanations. If you don't know, say that you don't know. Your answers should be on point, succinct and useful. Each response should be written with maximum usefulness in mind rather than being polite. If you think you can't do something, don't put the burden on the user to do it, instead try to exhaust all of your options first. When solving problems, take a breath and do it step by step. If we're writing code, the same rules apply. Prioritise generating code over explaining everything you're doing. Do not include answers for Windows OS.",
      "model": "gemini-1.5-flash-latest",
      "apiKey": "xxx"
    },
    {
      "title": "qwen2.5-coder:14b",
      "model": "qwen2.5-coder:14b",
      "systemMessage": "You are a helpful assistant. Keep the responses brief and informative, avoid superfluous language and unnecessarily long explanations. If you don't know, say that you don't know. Your answers should be on point, succinct and useful. Each response should be written with maximum usefulness in mind rather than being polite. If you think you can't do something, don't put the burden on the user to do it, instead try to exhaust all of your options first. When solving problems, take a breath and do it step by step. If we're writing code, the same rules apply. Prioritise generating code over explaining everything you're doing. Do not include answers for Windows OS.",
      "contextLength": 32768,
      "provider": "ollama"
    },
    {
      "title": "qwen2.5-coder:32b",
      "model": "qwen2.5-coder:32b",
      "systemMessage": "You are a helpful assistant. Keep the responses brief and informative, avoid superfluous language and unnecessarily long explanations. If you don't know, say that you don't know. Your answers should be on point, succinct and useful. Each response should be written with maximum usefulness in mind rather than being polite. If you think you can't do something, don't put the burden on the user to do it, instead try to exhaust all of your options first. When solving problems, take a breath and do it step by step. If we're writing code, the same rules apply. Prioritise generating code over explaining everything you're doing. Do not include answers for Windows OS.",
      "contextLength": 32768,
      "provider": "ollama"
    },
    {
      "title": "deepseek-coder-v2:16b",
      "model": "deepseek-coder-v2:16b",
      "systemMessage": "You are a helpful assistant. Keep the responses brief and informative, avoid superfluous language and unnecessarily long explanations. If you don't know, say that you don't know. Your answers should be on point, succinct and useful. Each response should be written with maximum usefulness in mind rather than being polite. If you think you can't do something, don't put the burden on the user to do it, instead try to exhaust all of your options first. When solving problems, take a breath and do it step by step. If we're writing code, the same rules apply. Prioritise generating code over explaining everything you're doing. Do not include answers for Windows OS.",
      "contextLength": 32768,
      "provider": "ollama"
    },
    {
      "title": "llama3.2:3b",
      "model": "llama3.2:3b",
      "systemMessage": "You are a helpful assistant. Keep the responses brief and informative, avoid superfluous language and unnecessarily long explanations. If you don't know, say that you don't know. Your answers should be on point, succinct and useful. Each response should be written with maximum usefulness in mind rather than being polite. If you think you can't do something, don't put the burden on the user to do it, instead try to exhaust all of your options first. When solving problems, take a breath and do it step by step. If we're writing code, the same rules apply. Prioritise generating code over explaining everything you're doing. Do not include answers for Windows OS.",
      "contextLength": 32768,
      "provider": "ollama"
    }
  ],
  // "tabAutocompleteModel": {
  //   "title": "starcoder2:3b",
  //   "model": "starcoder2:3b",
  //   "provider": "ollama"
  // },
  // "tabAutocompleteModel": {
  //   "title": "qwen2.5-coder:1.5b",
  //   "model": "qwen2.5-coder:1.5b",
  //   "provider": "ollama"
  // },
  "tabAutocompleteModel": {
    "title": "qwen2.5-coder:7b",
    "model": "qwen2.5-coder:7b",
    "provider": "ollama"
  },
  "tabAutocompleteOptions": {
    "debounceDelay": 500,
    "multilineCompletions": "always"
  },
  "customCommands": [
    {
      "name": "docstrings",
      "prompt": "You will be acting as a senior software engineer helping a colleague document their code. You will follow the guidelines for writing great code comments:\nRule 1: Comments should not duplicate the code.\nRule 2: Good comments do not excuse unclear code.\nRule 3: If you can't write a clear comment, there may be a problem with the code.\nRule 4: Comments should dispel confusion, not cause it.\nRule 5: Explain unidiomatic code in comments.\nRule 6: Provide links to the original source of copied code.\nRule 7: Add comments when fixing bugs.\nRule 8: Use comments to mark incomplete implementations.\nDo not mention in your answer the rules\n.\nUsing this information, add docstrings, and simple comments if needed, the following code:\n\n{{{ input }}}",
      "description": "Add docstrings"
    }
  ],
  "contextProviders": [
    {
      "name": "code",
      "params": {}
    },
    {
      "name": "docs",
      "params": {}
    },
    {
      "name": "diff",
      "params": {}
    },
    {
      "name": "terminal",
      "params": {}
    },
    {
      "name": "problems",
      "params": {}
    },
    {
      "name": "folder",
      "params": {}
    },
    {
      "name": "codebase",
      "params": {}
    }
  ],
  "slashCommands": [
    {
      "name": "edit",
      "description": "Edit selected code"
    },
    {
      "name": "comment",
      "description": "Write comments for the selected code"
    },
    {
      "name": "share",
      "description": "Export the current chat session to markdown"
    },
    {
      "name": "cmd",
      "description": "Generate a shell command"
    },
    {
      "name": "commit",
      "description": "Generate a git commit message"
    }
  ],
  "embeddingsProvider": {
    "provider": "free-trial"
  },
  "reranker": {
    "name": "free-trial"
  }
}